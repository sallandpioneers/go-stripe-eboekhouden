// Code generated by sqlc. DO NOT EDIT.
// source: customers.sql

package queries

import (
	"context"

	"github.com/oklog/ulid"
)

const createCustomer = `-- name: CreateCustomer :exec
INSERT INTO customers
(id, stripe_id, boekhouden_id, boekhouden_code)
VALUES
(?,?,?,?)
`

type CreateCustomerParams struct {
	ID             ulid.ULID
	StripeID       string
	BoekhoudenID   int64
	BoekhoudenCode string
}

func (q *Queries) CreateCustomer(ctx context.Context, arg *CreateCustomerParams) error {
	_, err := q.exec(ctx, q.createCustomerStmt, createCustomer,
		arg.ID,
		arg.StripeID,
		arg.BoekhoudenID,
		arg.BoekhoudenCode,
	)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, stripe_id, boekhouden_id, boekhouden_code
FROM customers
WHERE id = ?
`

func (q *Queries) GetCustomer(ctx context.Context, id ulid.ULID) (*Customer, error) {
	row := q.queryRow(ctx, q.getCustomerStmt, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.StripeID,
		&i.BoekhoudenID,
		&i.BoekhoudenCode,
	)
	return &i, err
}

const getCustomerBasedOnBoekhoudenID = `-- name: GetCustomerBasedOnBoekhoudenID :one
SELECT id, stripe_id, boekhouden_id, boekhouden_code
FROM customers
WHERE boekhouden_id = ?
`

func (q *Queries) GetCustomerBasedOnBoekhoudenID(ctx context.Context, boekhoudenID int64) (*Customer, error) {
	row := q.queryRow(ctx, q.getCustomerBasedOnBoekhoudenIDStmt, getCustomerBasedOnBoekhoudenID, boekhoudenID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.StripeID,
		&i.BoekhoudenID,
		&i.BoekhoudenCode,
	)
	return &i, err
}

const getCustomerBasedOnStripeID = `-- name: GetCustomerBasedOnStripeID :one
SELECT id, stripe_id, boekhouden_id, boekhouden_code
FROM customers
WHERE stripe_id = ?
`

func (q *Queries) GetCustomerBasedOnStripeID(ctx context.Context, stripeID string) (*Customer, error) {
	row := q.queryRow(ctx, q.getCustomerBasedOnStripeIDStmt, getCustomerBasedOnStripeID, stripeID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.StripeID,
		&i.BoekhoudenID,
		&i.BoekhoudenCode,
	)
	return &i, err
}
